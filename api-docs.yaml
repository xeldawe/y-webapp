openapi: 3.1.0
info:
  title: Order API
  description: Order management API
  version: 3.1.0
servers:
- url: http://localhost:8081
  description: Generated server url
security:
- x-api-key: []
tags:
- name: Order
  description: Endpoints for querying Orders
paths:
  /categories:
    get:
      tags:
      - category-entity-controller
      description: get-category
      operationId: getCollectionResource-category-get
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelCategory"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelCategory"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - category-entity-controller
      description: create-category
      operationId: postCollectionResource-category-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
  /categories/{id}:
    get:
      tags:
      - category-entity-controller
      description: get-category
      operationId: getItemResource-category-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "404":
          description: Not Found
    put:
      tags:
      - category-entity-controller
      description: update-category
      operationId: putItemResource-category-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
    delete:
      tags:
      - category-entity-controller
      description: delete-category
      operationId: deleteItemResource-category-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - category-entity-controller
      description: patch-category
      operationId: patchItemResource-category-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
  /orders:
    get:
      tags:
      - order-entity-controller
      description: get-order
      operationId: getCollectionResource-order-get
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelOrder"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelOrder"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - order-entity-controller
      description: create-order
      operationId: postCollectionResource-order-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
  /orders/search/customFindAll:
    get:
      tags:
      - order-search-controller
      operationId: executeSearch-order-get
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelOrder"
        "404":
          description: Not Found
  /orders/search/customFindById:
    get:
      tags:
      - order-search-controller
      operationId: executeSearch-order-get_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "404":
          description: Not Found
  /orders/{id}:
    get:
      tags:
      - order-entity-controller
      description: get-order
      operationId: getItemResource-order-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "404":
          description: Not Found
    put:
      tags:
      - order-entity-controller
      description: update-order
      operationId: putItemResource-order-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "204":
          description: No Content
    delete:
      tags:
      - order-entity-controller
      description: delete-order
      operationId: deleteItemResource-order-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - order-entity-controller
      description: patch-order
      operationId: patchItemResource-order-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "204":
          description: No Content
  /pets:
    get:
      tags:
      - pet-entity-controller
      description: get-pet
      operationId: getCollectionResource-pet-get
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelPet"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/CollectionModelEntityModelPet"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - pet-entity-controller
      description: create-pet
      operationId: postCollectionResource-pet-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelPet"
  /pets/{id}:
    get:
      tags:
      - pet-entity-controller
      description: get-pet
      operationId: getItemResource-pet-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelPet"
        "404":
          description: Not Found
    put:
      tags:
      - pet-entity-controller
      description: update-pet
      operationId: putItemResource-pet-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelPet"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelPet"
        "204":
          description: No Content
    delete:
      tags:
      - pet-entity-controller
      description: delete-pet
      operationId: deleteItemResource-pet-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - pet-entity-controller
      description: patch-pet
      operationId: patchItemResource-pet-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelPet"
        "204":
          description: No Content
  /profile:
    get:
      tags:
      - profile-controller
      operationId: listAllFormsOfMetadata
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/RepresentationModelObject"
  /profile/categories:
    get:
      tags:
      - profile-controller
      operationId: descriptor
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /profile/orders:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /profile/pets:
    get:
      tags:
      - profile-controller
      operationId: descriptor_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /store/order:
    post:
      tags:
      - Order
      summary: Create a new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "201":
          description: Order created successfully
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Pet not found with id
        "500":
          description: Internal server error
        "409":
          description: Conflict due to concurrent update
      security:
      - x-api-key: []
  /pet:
    post:
      tags:
      - pet-controller
      operationId: createPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Pet"
  /pet/bulk:
    post:
      tags:
      - pet-controller
      operationId: createPets
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /category:
    post:
      tags:
      - category-controller
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Category"
  /category/bulk:
    post:
      tags:
      - category-controller
      operationId: createCategorys
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: object
  /store/orders/{orderId}:
    get:
      tags:
      - Order
      summary: Get an order by ID
      operationId: getOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Order found
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
      security:
      - x-api-key: []
    delete:
      tags:
      - Order
      summary: Delete an order by ID
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Order deleted
        "404":
          description: Order not found
      security:
      - x-api-key: []
    patch:
      tags:
      - Order
      summary: Update an order by ID using JSON Patch
      operationId: updateOrder
      parameters:
      - name: orderId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: object
                additionalProperties:
                  type: object
        required: true
      responses:
        "200":
          description: Order updated
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
      security:
      - x-api-key: []
  /store/orders:
    get:
      tags:
      - Order
      summary: Get list of orders
      operationId: getOrders
      parameters:
      - name: from
        in: query
        description: From date-time in ISO format
        required: false
        schema:
          type: string
      - name: to
        in: query
        description: To date-time in ISO format
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderFilter"
      responses:
        "200":
          description: List of orders
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid date-time format
      security:
      - x-api-key: []
components:
  schemas:
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AbstractJsonSchemaPropertyObject"
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AbstractJsonSchemaPropertyObject"
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Item"
        type:
          type: string
        $schema:
          type: string
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/Links"
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
    EntityModelPet:
      type: object
      properties:
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PetXTag"
        petStatus:
          type: string
          enum:
          - AVAILABLE
          - PENDING
          - SOLD
        petCategories:
          type: array
          items:
            $ref: "#/components/schemas/PetXCategory"
        _links:
          $ref: "#/components/schemas/Links"
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PetXTag"
        petStatus:
          type: string
          enum:
          - AVAILABLE
          - PENDING
          - SOLD
        petCategories:
          type: array
          items:
            $ref: "#/components/schemas/PetXCategory"
    PetXCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        category:
          $ref: "#/components/schemas/Category"
    PetXTag:
      type: object
      properties:
        pet:
          $ref: "#/components/schemas/Pet"
        tag:
          $ref: "#/components/schemas/Tag"
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
    CollectionModelEntityModelPet:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            pets:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelPet"
        _links:
          $ref: "#/components/schemas/Links"
    EntityModelCategory:
      type: object
      properties:
        name:
          type: string
        _links:
          $ref: "#/components/schemas/Links"
    CollectionModelEntityModelCategory:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelCategory"
        _links:
          $ref: "#/components/schemas/Links"
    EntityModelOrder:
      type: object
      properties:
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          type: string
          enum:
          - PLACED
          - APPROVED
          - DELIVERED
        complete:
          type: boolean
        _links:
          $ref: "#/components/schemas/Links"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          type: string
          enum:
          - PLACED
          - APPROVED
          - DELIVERED
        complete:
          type: boolean
    CollectionModelEntityModelOrder:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelOrder"
        _links:
          $ref: "#/components/schemas/Links"
    CategoryRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
    OrderRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        orderStatus:
          type: string
          enum:
          - PLACED
          - APPROVED
          - DELIVERED
        complete:
          type: boolean
    PetRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PetXTag"
        petStatus:
          type: string
          enum:
          - AVAILABLE
          - PENDING
          - SOLD
        petCategories:
          type: array
          items:
            $ref: "#/components/schemas/PetXCategory"
    OrderFilter:
      type: object
      properties:
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
    Links:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Link"
  securitySchemes:
    x-api-key:
      type: apiKey
      name: x-api-key
      in: header
